#LAB: Google Cloud Fundamentals: Getting Started with GKE

##Objectives: 
In this lab, you learn how to perform the following tasks:

	. Provision a Kubernetes cluster using Kubernetes Engine.

	. Deploy and manage Docker containers using kubectl.
	
##Steps:

1.	Provision a Kubernetes cluster using Kubernetes Engine.

	Confirm that needed APIs are enabled.
	
	gcloud services list --available
	
	- Confirm that needed APIs are enabled:
	
		gcloud services list --available
	
	- If either API is missing, Run this command: Replacing SERVICE with the API
	
		gcloud services enable [SERVICE …] [--async] [GCLOUD_WIDE_FLAG …] 
		
2.	Deploy and manage Docker containers using kubectl.

		1. Start a Kubernetes Engine cluster.
				
			- Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
			
				gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
					
			- After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
				
				kubectl version
					
			- View your running nodes in the GCP Console.
				
				kubectl get nodes
					
				Your Kubernetes cluster is now ready for use.
					
		2. Deploy and manage Docker containers using kubectl.
		
			- Launch a single instance of the nginx container. (Nginx is a popular web server.):

				kubectl create deploy nginx --image=nginx:1.17.10
				
			- View the pod running the nginx container:
			
				kubectl get pods
				
			- Expose the nginx container to the Internet:
			
				kubectl expose deployment nginx --port 80 --type LoadBalancer
				
			- View the new service:
			
				kubectl get services
				
			- Use the external IP address to test and contact the nginx container remotely.
			
			-Paste the copied cluster's external IP address into a new web browser 
			
			- Result: The default home page of the Nginx browser is displayed.
			
			- Scale up the number of pods running on your service:
			
				kubectl scale deployment nginx --replicas 3
				
			- Confirm that Kubernetes has updated the number of pods:
			
				kubectl get pods
				
			- Confirm that your external IP address has not changed:
			
				kubectl get services
			- Return to the web browser tab in which you viewed your cluster's external IP address and refresh the page 
			
			- Result: Confirm that the nginx web server is still responding.
				